{\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.22621}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\b\f0\fs22\lang9 Rubin version 1.0 released Feb 2023\b0\line A Ruby environment.                                                                                              rubinsystem@gmail.com \line\line This file is a basic run through of the system.\line To run rubin you can run "launch.rb" from the install directory.\par
\line   \b Topics:\b0\line     System Directories\line     System Files & Components\line     Apps\line     The Class Directory\line     About System Config and Features\line     Building and running apps.\line\par
System Directories.\line There is a default tree of directories built when rubin installs.\par
/rubin/data                                                     all kinds of data lives here\line /rubin/app                                                       apps and programs \line /rubin/bin                                                         interpreters and other exes\line /rubin/class                                                     you can store project files here, they are run automatically on boot\line /rubin/shortcuts                                            meant for lnk files but can run rb files externally(from the caller)\line /rubin/system                                                system scripts are stored here\line /rubin/data/appdata                                    apps can store data here\line /rubin/data/backups                                    various copies of stuff can go here, system versions for example\line /rubin/data/config                                        system config is here but any program can store config here\line /rubin/data/definitions                              definition files compiled with export classes are kept here\line /rubin/data/fileio                                          FileIO_Binding can be set to eval to/from files, lol\line /rubin/data/logs                                            logs go here duh\line /rubin/data/scripts                                       ect script files\line /rubin/data/sys                                             \line /rubin/data/sys/instance                          insance data on installation instances running\line /rubin/data/temp                                        a dir that is auto cleaned based on age and access frequency*\line rubin/data/user                                           a dir that is pretty unused for now\par
You can access these paths globally with SYSTEM.dirs or SYSTEM.appdatadir / SYSTEM.datadir for example.\line\line System Files and Components\line\line   The system directory follows a rule system, any file in it besides 'rubin.rb', the 'definitions.rb' or\line   'deamond.rb', will be treated as a system component and loaded, expected to have at least one main\line   class sharing the name of the file, the system will initialize it using instance eval. Components typically\line   opperate autonomously of the system and provide inter-functionality of features, such as the \line   dictionary or network manager.\line\line   The daemond file.\line\line    The system daemond is a class object whos sole job is to run the daemond files contents on main\line    context.\line\line   The definitions file.\line\line   The definitions file is an installer included definition, if config 9 is set to true rubin will look for this\line   file when booting, it can also be set to an array and a list of names of files in /rubin/data/definitions.\line   Just set to false or [] to just not load any definition files. The purpose of definition files is either to\line   redefine classes and or function as large ruby method libraries. They will be really common methods\line  that share code across ruby programs.\line Keep note that for now definitions automatically evaluate on Rubin_System class objects context, later it will be configurable so you can run definitions on main and other contexts***********\line\line\line   Apps and app development.\line    \line    The app directory stores two types of apps, an app can be what ever named rb file, or a folder with\line   an rb file inside sharing its name as an entry point, as this point i call it a program. Apps can store data\line  and work with it in their install dir but its better to use /rubin/data/appdata and make a folder\line  with the apps name to work with.\line\line   when you run an app using SYSTEM.run "appname", rubin evaluates the file, then looks at two\line   reserved variables, @app and @threads. After evaluating the app those values will be set by the\line   app file and carry over after eval when then system continues to check for an app object and threads.\line  if it finds them it ads references to them into @thread_pool and @apps.\line\line Apps dont have to return links of them self to the system, it just helps with interconectivity of apps.\line apps are free to have what ever file and folder structure in their install directory and appdata\line\line\line The Class Directory\line\line   Also known as classdir, this directory is either configured to load every ruby script or not. You can add files here you want to run every time you run rubin. Files that run here arent intended to contain apps or your main work code but it can if you want, the actual intended purpose of the class directory is to run redefinition of existing objects as well as new ones,\line  they can be used to set up common environments for your apps.\line SYSTEM.export_definitions(name) will create a compiled definition file in rubin/data/definitions from every file in the class dir\line SYSTEM.import_definitions(name) will break down a compiled definitions file into your classdir.\line\line About System Config\line\line If you use config, youll get an array of both names and the values. if you use config like this config(1,true)\line you can set the value, if you just use config(1) you will get the value back, you cam also use the config\line items name instead of its number.\line\line You also get a method show_config or its alias config? which prints a nice numbered list of config values\line next to their name.\line\line\line   System Boot order\line\line  1. check work directory, locate system install dir,change to it if not already there, verify write access\line  2. Initialize Rubin_System class object, load config data\line  3. Check config for ruby gems and install them if they arent already\line  4. Check definitions and load if configured. \line  5. Load all  files in the classdir if configured to.;m\line  6. Rubin_System runs post_init method, runs autostart apps\line  7. Run startup scripts if configured.\line  8. Starts a repl shell if configured. \line  9. System is up if the flow(of eval) wasnt captured by an app or the system shell flow is returned to the\line caller with nil.\line\par
Installing the system and using it for the first time.\line\line   When you complete the installer script and open then new rubin installation directory you made,\line  you will find the system directories, a launcher and a cmd script to start the users installed ruby irb.\line  Assuming you have ruby installed on windows you will have irb. \par
Irb is for catching exceptions the shell could not catch, just load 'launch.rb'. and proceed normally or\line attempt to replicate your error. The shell will catch and error log the majority of exceptions you\line encounter.\line\line   Building an app.\par
  Here is a simple straight forward modle of an app file\line\line ###### App.rb\line class App\line   def initialize\line     self.func\line   end\line   def func\line     @t1=Thread.new\{ 100000.times \{rand\}\}\line   end\line end\line @app=App.new\line @threads<<@app.instance_variable_get("@t1")\line ########\line\line As you know, @app and @threads are system reserved and are collected for data if they happen to \line contain any after an app file is ran. This will help the system control apps, threads and apps to interact\line with eachother and the system.\line  theres also a shutdown method, if you define one in your app, a system shutdown or restart will check\line to see if its defined for an app and call it if so.\par
\line   Running apps.\par
You can get apps in the appdir by calling apps? and run with run 'appname' no extension or path needed.\line Running apps go into a Rubin_System instance varibale @apps as an array of data\line [appname,instanceid,runtime,appobj,threads]\line\line Running apps can either take flow control or run threads and return control to the system shell.\line Apps can evan have their own shell, in oss.rb there is a Shell object class for repl.\line\par
\par
Configuring the system for various startups.\line\line How system components work and how to make your own.\line\line\line\line\line\line\line\line\line\line\line\par
}
 